name: android build scripts

on:
  workflow_dispatch: # Allows manual triggering, which will create a release
  push:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'
  pull_request:
    branches:
      - development
      - main
    paths:
      - '.github/workflows/android-build-scripts.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'

jobs:
  build-main-on-linux:
    name: android main on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up android ndk r25 (16k support)
        run: |
          curl -L -s "https://storage.googleapis.com/android-build/builds/aosp-ndk-r25-release-linux-linux/12161346/ca7222ab71c8d5b8add70c147e6b14b8d05d64ea785766db4b1efe9f70eceba1/android-ndk-12161346-linux-x86_64.zip?GoogleAccessId=gcs-sign%40android-builds-project.google.com.iam.gserviceaccount.com&Expires=1757333861&Signature=lY1uHS9nZ4HsDjGdF5LbX9timehlZA89q26pu5%2BllKtrWQBVndPHptDuoI8B3ldx0M0FcByQRXFLaa7uoc8kk%2FzKus90oJm18RyzGucZrQvUVnhIAMM1M306PRSmlQ68ISO8UL2w60%2BqMjvaEUQm4pas7UaPJ%2BDJri%2FzqAa5SOMQVLz7ld2YJI8t%2BKwLrQ%2BPcF7oy7kptq5Qpl%2BUsdn6meeftr8rs0C3m9yFo95XNZtjIa4caOJ4DmV0H88ewKEF3%2FdB2%2FScouNL1j%2BuqpCE%2B9T3brVRedOGcjhoncgm%2BWaI1%2Be5JXCnda%2BUZP%2BySSccWwwECBuECyMcKbiPRxuZpA%3D%3D" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV
      - name: run the build script
        run: ./android.sh -d --enable-android-media-codec --enable-android-zlib --enable-libx264 --disable-arm-v7a
      - name: prepare and upload main aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-main-ndk-r25-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-main-aar
          path: ffmpeg-kit-main-ndk-r25-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'

  build-lts-on-linux:
    name: android lts on linux (ndk-r25-16k)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: set up adopt jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: prerequisites
        run: ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1"
      - name: set up android ndk r25 (16k support)
        run: |
          curl -L -s "https://storage.googleapis.com/android-build/builds/aosp-ndk-r25-release-linux-linux/12161346/ca7222ab71c8d5b8add70c147e6b14b8d05d64ea785766db4b1efe9f70eceba1/android-ndk-12161346-linux-x86_64.zip?GoogleAccessId=gcs-sign%40android-builds-project.google.com.iam.gserviceaccount.com&Expires=1757333861&Signature=lY1uHS9nZ4HsDjGdF5LbX9timehlZA89q26pu5%2BllKtrWQBVndPHptDuoI8B3ldx0M0FcByQRXFLaa7uoc8kk%2FzKus90oJm18RyzGucZrQvUVnhIAMM1M306PRSmlQ68ISO8UL2w60%2BqMjvaEUQm4pas7UaPJ%2BDJri%2FzqAa5SOMQVLz7ld2YJI8t%2BKwLrQ%2BPcF7oy7kptq5Qpl%2BUsdn6meeftr8rs0C3m9yFo95XNZtjIa4caOJ4DmV0H88ewKEF3%2FdB2%2FScouNL1j%2BuqpCE%2B9T3brVRedOGcjhoncgm%2BWaI1%2Be5JXCnda%2BUZP%2BySSccWwwECBuECyMcKbiPRxuZpA%3D%3D" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV
      - name: run the build script
        run: ./android.sh -d --lts --enable-android-media-codec --enable-libx264 --enable-android-zlib
      - name: prepare and upload lts aar
        run: |
          AAR_PATH=$(find prebuilt -type f -name 'ffmpeg-kit.aar')
          if [ -z "$AAR_PATH" ]; then
            echo "Error: ffmpeg-kit.aar not found in prebuilt directory."
            exit 1
          fi
          mv "$AAR_PATH" "ffmpeg-kit-lts-ndk-r25-16k.aar"
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-lts-aar
          path: ffmpeg-kit-lts-ndk-r25-16k.aar
          if-no-files-found: error
      - name: print build logs
        if: ${{ always() }}
        run: cat build.log
      - name: print ffbuild logs
        if: ${{ failure() }}
        run: '[[ -f ./src/ffmpeg/ffbuild/config.log ]] && tail -50 ./src/ffmpeg/ffbuild/config.log'

  create-release:
    name: create github release
    # This job will only start if BOTH of the jobs above complete successfully.
    needs: [build-main-on-linux, build-lts-on-linux]
    runs-on: ubuntu-latest
    # This job will only run if the workflow is started manually.
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: set release tag
        id: set_tag
        run: echo "TAG_NAME=ffmpeg-kit-android-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: download all aar artifacts
        uses: actions/download-artifact@v4
        with:
          path: aar-artifacts
      - name: list downloaded files for debug
        run: ls -R aar-artifacts
      - name: create github release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Android AARs (NDK r25-16k) - ${{ env.TAG_NAME }}"
          body: "Automated release of Android AAR files from Linux builds using NDK r25 with 16kB page size support."
          prerelease: true
          files: aar-artifacts/*/*.aar
